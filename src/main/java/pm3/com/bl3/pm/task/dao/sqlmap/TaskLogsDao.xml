<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ta_task_logs[TaskLogs]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-01-02 15:38:47 -->
<mapper namespace="com.bl3.pm.task.dao.TaskLogsDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="TaskLogsPO">
		INSERT INTO ta_task_logs (
		<if test="task_id != null">
	         task_id, <!-- 任务ID -->
		</if>
		<if test="serial_no != null">
	         serial_no, <!-- 序号 -->
		</if>
		<if test="content != null and content != ''">
	         content, <!-- 修改描述 -->
		</if>
		<if test="update_time != null and update_time != ''">
	         update_time, <!-- 修改时间 -->
		</if>
		<if test="update_user_id != null">
	         update_user_id, <!-- 修改人 -->
		</if>
		<if test="state != null and state != ''">
	         state, <!-- 任务状态 -->
		</if>
		  <if test="percent != null and percent != ''">
	          percent,  <!-- 百分比 -->
	   </if>
		<if test="log_id != null">
	          log_id <!-- 修改编码 -->
	   </if>
	 
		)VALUES(
		<if test="task_id != null">
	          #{task_id, jdbcType=INTEGER}, <!-- 任务ID -->
	    </if>
		<if test="serial_no != null">
	          #{serial_no, jdbcType=INTEGER}, <!-- 序号 -->
	    </if>
		<if test="content != null and content != ''">
	          #{content, jdbcType=VARCHAR}, <!-- 修改描述 -->
	    </if>
		<if test="update_time != null and update_time != ''">
	          #{update_time, jdbcType=VARCHAR}, <!-- 修改时间 -->
	    </if>
		<if test="update_user_id != null">
	          #{update_user_id, jdbcType=INTEGER}, <!-- 修改人 -->
	    </if>
		<if test="state != null and state != ''">
	          #{state, jdbcType=VARCHAR}, <!-- 任务状态 -->
	    </if>
	      <if test="percent != null and percent != ''">
		     #{percent, jdbcType=NUMERIC},  <!-- 百分比 -->
	    </if>
		<if test="log_id != null">
		     #{log_id, jdbcType=INTEGER} <!-- 修改编码 -->
	    </if>
	  
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="TaskLogsPO">
		INSERT INTO ta_task_logs (
		    <include refid="column" />
		)
		VALUES (
		    #{log_id, jdbcType=INTEGER},  <!-- 修改编码 -->
		    #{task_id, jdbcType=INTEGER},  <!-- 任务ID -->
		    #{serial_no, jdbcType=INTEGER},  <!-- 序号 -->
		    #{content, jdbcType=VARCHAR},  <!-- 修改描述 -->
		    #{update_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
		    #{update_user_id, jdbcType=INTEGER},  <!-- 修改人 -->
		    #{state, jdbcType=VARCHAR}  <!-- 任务状态 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="TaskLogsPO">
		UPDATE ta_task_logs
		<set>
			<if test="log_id != null">
		          log_id = #{log_id, jdbcType=INTEGER},  <!-- 修改编码 -->
			</if>
			<if test="task_id != null">
		          task_id = #{task_id, jdbcType=INTEGER},  <!-- 任务ID -->
			</if>
			<if test="serial_no != null">
		          serial_no = #{serial_no, jdbcType=INTEGER},  <!-- 序号 -->
			</if>
			<if test="content != null">
		          content = #{content, jdbcType=VARCHAR},  <!-- 修改描述 -->
			</if>
			<if test="update_time != null">
		          update_time = #{update_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
			</if>
			<if test="update_user_id != null">
		          update_user_id = #{update_user_id, jdbcType=INTEGER},  <!-- 修改人 -->
			</if>
			<if test="state != null">
		          state = #{state, jdbcType=VARCHAR},  <!-- 任务状态 -->
			</if>
		</set>
		WHERE  log_id = #{log_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM ta_task_logs WHERE  log_id = #{log_id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="TaskLogsPO">
		SELECT
		<include refid="column" />
		FROM ta_task_logs WHERE  log_id = #{log_id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="TaskLogsPO">
		SELECT
		    <include refid="column" />
		FROM ta_task_logs
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="TaskLogsPO">
		SELECT
			<include refid="column" />	
		FROM ta_task_logs
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="TaskLogsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM ta_task_logs
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="like" parameterType="Dto" resultType="TaskLogsPO">
		SELECT
			<include refid="column" />	
		FROM ta_task_logs
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likeOr" parameterType="Dto" resultType="TaskLogsPO">
		SELECT
			<include refid="column" />	
		FROM ta_task_logs
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likePage" parameterType="Dto" resultType="TaskLogsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM ta_task_logs
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="likeOrPage" parameterType="Dto" resultType="TaskLogsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM ta_task_logs
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>	
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM ta_task_logs
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM ta_task_logs
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  log_id,  <!-- 修改编码 -->
		  task_id,  <!-- 任务ID -->
		  serial_no,  <!-- 序号 -->
		  content,  <!-- 修改描述 -->
		  update_time,  <!-- 修改时间 -->
		  update_user_id,  <!-- 修改人 -->
		  state  <!-- 任务状态 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  ta_task_logs.log_id,  <!-- 修改编码 -->
		  ta_task_logs.task_id,  <!-- 任务ID -->
		  ta_task_logs.serial_no,  <!-- 序号 -->
		  ta_task_logs.content,  <!-- 修改描述 -->
		  ta_task_logs.update_time,  <!-- 修改时间 -->
		  ta_task_logs.update_user_id,  <!-- 修改人 -->
		  ta_task_logs.state  <!-- 任务状态 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="log_id != null ">
		      AND log_id = #{log_id}  <!-- 修改编码 -->
		</if>
	   <if test="task_id != null ">
		      AND task_id = #{task_id}  <!-- 任务ID -->
		</if>
	   <if test="serial_no != null ">
		      AND serial_no = #{serial_no}  <!-- 序号 -->
		</if>
	    <if test="content != null and content != ''">
		      AND content = #{content}  <!-- 修改描述 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time = #{update_time}  <!-- 修改时间 -->
		</if>
	   <if test="update_user_id != null ">
		      AND update_user_id = #{update_user_id}  <!-- 修改人 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state = #{state}  <!-- 任务状态 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 交集-->
	<sql id="like">
		<if test="task_id != null ">
		      AND task_id like '${task_id}%'  <!-- 任务ID -->
		</if>
	    <if test="content != null and content != ''">
		      AND content like '${content}%'  <!-- 修改描述 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time like '${update_time}%'  <!-- 修改时间 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state like '${state}%'  <!-- 任务状态 -->
		</if>
	</sql>
	<!-- Where模糊匹配字段 并集 -->
	<sql id="likeOr">
		<if test="task_id != null ">
		      AND task_id like '${task_id}%'  <!-- 任务ID -->
		</if>
	    <if test="content != null and content != ''">
		      Or content like '${content}%'  <!-- 修改描述 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      Or update_time like '${update_time}%'  <!-- 修改时间 -->
		</if>
	    <if test="state != null and state != ''">
		      Or state like '${state}%'  <!-- 任务状态 -->
		</if>
	</sql>
	
</mapper>