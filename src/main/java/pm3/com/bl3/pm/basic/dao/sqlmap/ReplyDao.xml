<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- bs_reply[Reply]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-01-26 15:42:53 -->
<mapper namespace="com.bl3.pm.basic.dao.ReplyDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="ReplyPO">
		INSERT INTO bs_reply (
		<if test="content != null and content != ''">
	         content, <!-- 内容 -->
		</if>
		<if test="theme_id != null">
	         theme_id, <!-- 主题/回复编码 -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- 创建时间 -->
		</if>
		<if test="create_user_id != null">
	         create_user_id, <!-- 创建人 -->
		</if>
		<if test="reply_type != null">
	         reply_type, <!-- 回复类型 0:主题,1:回复的再回复 -->
		</if>
		<if test="id != null">
	          id  <!-- 回复编码 -->
	   </if>
		)VALUES(
		<if test="content != null and content != ''">
	          #{content, jdbcType=VARCHAR}, <!-- 内容 -->
	    </if>
		<if test="theme_id != null">
	          #{theme_id, jdbcType=INTEGER}, <!-- 主题/回复编码 -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="create_user_id != null">
	          #{create_user_id, jdbcType=INTEGER}, <!-- 创建人 -->
	    </if>
		<if test="reply_type != null">
	          #{reply_type, jdbcType=INTEGER}, <!-- 回复类型 0:主题,1:回复的再回复 -->
	    </if>
		<if test="id != null">
		     #{id, jdbcType=INTEGER}  <!-- 回复编码 -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="ReplyPO">
		INSERT INTO bs_reply (
		    <include refid="column" />
		)
		VALUES (
		    #{id, jdbcType=INTEGER},  <!-- 回复编码 -->
		    #{content, jdbcType=VARCHAR},  <!-- 内容 -->
		    #{theme_id, jdbcType=INTEGER},  <!-- 主题/回复编码 -->
		    #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
		    #{reply_type, jdbcType=INTEGER}  <!-- 回复类型 0:主题,1:回复的再回复 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="ReplyPO">
		UPDATE bs_reply
		<set>
			<if test="id != null">
		          id = #{id, jdbcType=INTEGER},  <!-- 回复编码 -->
			</if>
			<if test="content != null">
		          content = #{content, jdbcType=VARCHAR},  <!-- 内容 -->
			</if>
			<if test="theme_id != null">
		          theme_id = #{theme_id, jdbcType=INTEGER},  <!-- 主题/回复编码 -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="create_user_id != null">
		          create_user_id = #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
			</if>
			<if test="reply_type != null">
		          reply_type = #{reply_type, jdbcType=INTEGER},  <!-- 回复类型 0:主题,1:回复的再回复 -->
			</if>
		</set>
		WHERE  id = #{id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bs_reply WHERE  id = #{id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="ReplyPO">
		SELECT
		<include refid="column" />
		FROM bs_reply WHERE  id = #{id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="ReplyPO">
		SELECT
		    <include refid="column" />
		FROM bs_reply
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="ReplyPO">
		SELECT
			<include refid="column" />	
		FROM bs_reply
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="ReplyPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_reply
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="like" parameterType="Dto" resultType="ReplyPO">
		SELECT
			<include refid="column" />	
		FROM bs_reply
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likeOr" parameterType="Dto" resultType="ReplyPO">
		SELECT
			<include refid="column" />	
		FROM bs_reply
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likePage" parameterType="Dto" resultType="ReplyPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_reply
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="likeOrPage" parameterType="Dto" resultType="ReplyPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_reply
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>	
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM bs_reply
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bs_reply
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id,  <!-- 回复编码 -->
		  content,  <!-- 内容 -->
		  theme_id,  <!-- 主题/回复编码 -->
		  create_time,  <!-- 创建时间 -->
		  create_user_id,  <!-- 创建人 -->
		  reply_type  <!-- 回复类型 0:主题,1:回复的再回复 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bs_reply.id,  <!-- 回复编码 -->
		  bs_reply.content,  <!-- 内容 -->
		  bs_reply.theme_id,  <!-- 主题/回复编码 -->
		  bs_reply.create_time,  <!-- 创建时间 -->
		  bs_reply.create_user_id,  <!-- 创建人 -->
		  bs_reply.reply_type  <!-- 回复类型 0:主题,1:回复的再回复 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id != null ">
		      AND id = #{id}  <!-- 回复编码 -->
		</if>
	    <if test="content != null and content != ''">
		      AND content = #{content}  <!-- 内容 -->
		</if>
	   <if test="theme_id != null ">
		      AND theme_id = #{theme_id}  <!-- 主题/回复编码 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- 创建时间 -->
		</if>
	   <if test="create_user_id != null ">
		      AND create_user_id = #{create_user_id}  <!-- 创建人 -->
		</if>
	   <if test="reply_type != null ">
		      AND reply_type = #{reply_type}  <!-- 回复类型 0:主题,1:回复的再回复 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 交集-->
	<sql id="like">
	    <if test="content != null and content != ''">
		      AND content like '${content}%'  <!-- 内容 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	</sql>
	<!-- Where模糊匹配字段 并集 -->
	<sql id="likeOr">
	    <if test="content != null and content != ''">
		      Or content like '${content}%'  <!-- 内容 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      Or create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	</sql>
	
</mapper>