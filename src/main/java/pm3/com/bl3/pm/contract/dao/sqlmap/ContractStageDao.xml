<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- bs_contract_stage[ContractStage]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-01-17 17:29:20 -->
<mapper namespace="com.bl3.pm.contract.dao.ContractStageDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="ContractStagePO">
		INSERT INTO bs_contract_stage (
		<if test="ct_id != null">
	         ct_id, <!-- 合同ID -->
		</if>
		<if test="stage_code != null and stage_code != ''">
	         stage_code, <!-- 阶段编码 -->
		</if>
		<if test="stage_name != null and stage_name != ''">
	         stage_name, <!-- 阶段名称 -->
		</if>
		<if test="percentage != null">
	         percentage, <!-- 支付百分比 -->
		</if>
		<if test="rece_amount != null">
	         rece_amount, <!-- 应收金额 -->
		</if>
		<if test="pay_amount != null">
	         pay_amount, <!-- 实收金额 -->
		</if>
		<if test="stage_remark != null and stage_remark != ''">
	         stage_remark, <!-- 备注 -->
		</if>
		<if test="create_user_id != null">
	         create_user_id, <!-- 创建人 -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- 创建时间 -->
		</if>
		<if test="update_user_id != null">
	         update_user_id, <!-- 更新人 -->
		</if>
		<if test="update_time != null and update_time != ''">
	         update_time, <!-- 更新时间 -->
		</if>
		<if test="state != null and state != ''">
	         state, <!-- 状态 -->
		</if>
	          ct_stage_id  <!-- 合同支付阶段ID -->
		)VALUES(
		<if test="ct_id != null">
	          #{ct_id, jdbcType=INTEGER}, <!-- 合同ID -->
	    </if>
		<if test="stage_code != null and stage_code != ''">
	          #{stage_code, jdbcType=VARCHAR}, <!-- 阶段编码 -->
	    </if>
		<if test="stage_name != null and stage_name != ''">
	          #{stage_name, jdbcType=VARCHAR}, <!-- 阶段名称 -->
	    </if>
		<if test="percentage != null">
	          #{percentage, jdbcType=NUMERIC}, <!-- 支付百分比 -->
	    </if>
		<if test="rece_amount != null">
	          #{rece_amount, jdbcType=NUMERIC}, <!-- 应收金额 -->
	    </if>
		<if test="pay_amount != null">
	          #{pay_amount, jdbcType=NUMERIC}, <!-- 实收金额 -->
	    </if>
		<if test="stage_remark != null and stage_remark != ''">
	          #{stage_remark, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="create_user_id != null">
	          #{create_user_id, jdbcType=INTEGER}, <!-- 创建人 -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="update_user_id != null">
	          #{update_user_id, jdbcType=INTEGER}, <!-- 更新人 -->
	    </if>
		<if test="update_time != null and update_time != ''">
	          #{update_time, jdbcType=VARCHAR}, <!-- 更新时间 -->
	    </if>
		<if test="state != null and state != ''">
	          #{state, jdbcType=VARCHAR}, <!-- 状态 -->
	    </if>
		    null  <!-- 合同支付阶段ID -->
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="ContractStagePO">
		INSERT INTO bs_contract_stage (
		    <include refid="column" />
		)
		VALUES (
		    #{ct_stage_id, jdbcType=INTEGER},  <!-- 合同支付阶段ID -->
		    #{ct_id, jdbcType=INTEGER},  <!-- 合同ID -->
		    #{stage_code, jdbcType=VARCHAR},  <!-- 阶段编码 -->
		    #{stage_name, jdbcType=VARCHAR},  <!-- 阶段名称 -->
		    #{percentage, jdbcType=NUMERIC},  <!-- 支付百分比 -->
		    #{rece_amount, jdbcType=NUMERIC},  <!-- 应收金额 -->
		    #{pay_amount, jdbcType=NUMERIC},  <!-- 实收金额 -->
		    #{stage_remark, jdbcType=VARCHAR},  <!-- 备注 -->
		    #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
		    #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{update_user_id, jdbcType=INTEGER},  <!-- 更新人 -->
		    #{update_time, jdbcType=VARCHAR},  <!-- 更新时间 -->
		    #{state, jdbcType=VARCHAR}  <!-- 状态 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="ContractStagePO">
		UPDATE bs_contract_stage
		<set>
			<if test="ct_stage_id != null">
		          ct_stage_id = #{ct_stage_id, jdbcType=INTEGER},  <!-- 合同支付阶段ID -->
			</if>
			<if test="ct_id != null">
		          ct_id = #{ct_id, jdbcType=INTEGER},  <!-- 合同ID -->
			</if>
			<if test="stage_code != null">
		          stage_code = #{stage_code, jdbcType=VARCHAR},  <!-- 阶段编码 -->
			</if>
			<if test="stage_name != null">
		          stage_name = #{stage_name, jdbcType=VARCHAR},  <!-- 阶段名称 -->
			</if>
			<if test="percentage != null">
		          percentage = #{percentage, jdbcType=NUMERIC},  <!-- 支付百分比 -->
			</if>
			<if test="rece_amount != null">
		          rece_amount = #{rece_amount, jdbcType=NUMERIC},  <!-- 应收金额 -->
			</if>
			<if test="pay_amount != null">
		          pay_amount = #{pay_amount, jdbcType=NUMERIC},  <!-- 实收金额 -->
			</if>
			<if test="stage_remark != null">
		          stage_remark = #{stage_remark, jdbcType=VARCHAR},  <!-- 备注 -->
			</if>
			<if test="create_user_id != null">
		          create_user_id = #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="update_user_id != null">
		          update_user_id = #{update_user_id, jdbcType=INTEGER},  <!-- 更新人 -->
			</if>
			<if test="update_time != null">
		          update_time = #{update_time, jdbcType=VARCHAR},  <!-- 更新时间 -->
			</if>
			<if test="state != null">
		          state = #{state, jdbcType=VARCHAR},  <!-- 状态 -->
			</if>
		</set>
		WHERE  ct_stage_id = #{ct_stage_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bs_contract_stage WHERE  ct_stage_id = #{ct_stage_id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="ContractStagePO">
		SELECT
		<include refid="column" />
		FROM bs_contract_stage WHERE  ct_stage_id = #{ct_stage_id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="ContractStagePO">
		SELECT
		    <include refid="column" />
		FROM bs_contract_stage
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="ContractStagePO">
		SELECT
			<include refid="column" />	
		FROM bs_contract_stage
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="ContractStagePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_contract_stage
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="like" parameterType="Dto" resultType="ContractStagePO">
		SELECT
			<include refid="column" />	
		FROM bs_contract_stage
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likeOr" parameterType="Dto" resultType="ContractStagePO">
		SELECT
			<include refid="column" />	
		FROM bs_contract_stage
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likePage" parameterType="Dto" resultType="ContractStagePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_contract_stage
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="likeOrPage" parameterType="Dto" resultType="ContractStagePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_contract_stage
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>	
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM bs_contract_stage
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bs_contract_stage
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  ct_stage_id,  <!-- 合同支付阶段ID -->
		  ct_id,  <!-- 合同ID -->
		  stage_code,  <!-- 阶段编码 -->
		  stage_name,  <!-- 阶段名称 -->
		  percentage,  <!-- 支付百分比 -->
		  rece_amount,  <!-- 应收金额 -->
		  pay_amount,  <!-- 实收金额 -->
		  stage_remark,  <!-- 备注 -->
		  create_user_id,  <!-- 创建人 -->
		  create_time,  <!-- 创建时间 -->
		  update_user_id,  <!-- 更新人 -->
		  update_time,  <!-- 更新时间 -->
		  state  <!-- 状态 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bs_contract_stage.ct_stage_id,  <!-- 合同支付阶段ID -->
		  bs_contract_stage.ct_id,  <!-- 合同ID -->
		  bs_contract_stage.stage_code,  <!-- 阶段编码 -->
		  bs_contract_stage.stage_name,  <!-- 阶段名称 -->
		  bs_contract_stage.percentage,  <!-- 支付百分比 -->
		  bs_contract_stage.rece_amount,  <!-- 应收金额 -->
		  bs_contract_stage.pay_amount,  <!-- 实收金额 -->
		  bs_contract_stage.stage_remark,  <!-- 备注 -->
		  bs_contract_stage.create_user_id,  <!-- 创建人 -->
		  bs_contract_stage.create_time,  <!-- 创建时间 -->
		  bs_contract_stage.update_user_id,  <!-- 更新人 -->
		  bs_contract_stage.update_time,  <!-- 更新时间 -->
		  bs_contract_stage.state  <!-- 状态 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="ct_stage_id != null ">
		      AND ct_stage_id = #{ct_stage_id}  <!-- 合同支付阶段ID -->
		</if>
	   <if test="ct_id != null ">
		      AND ct_id = #{ct_id}  <!-- 合同ID -->
		</if>
	    <if test="stage_code != null and stage_code != ''">
		      AND stage_code = #{stage_code}  <!-- 阶段编码 -->
		</if>
	    <if test="stage_name != null and stage_name != ''">
		      AND stage_name = #{stage_name}  <!-- 阶段名称 -->
		</if>
	   <if test="percentage != null ">
		      AND percentage = #{percentage}  <!-- 支付百分比 -->
		</if>
	   <if test="rece_amount != null ">
		      AND rece_amount = #{rece_amount}  <!-- 应收金额 -->
		</if>
	   <if test="pay_amount != null ">
		      AND pay_amount = #{pay_amount}  <!-- 实收金额 -->
		</if>
	    <if test="stage_remark != null and stage_remark != ''">
		      AND stage_remark = #{stage_remark}  <!-- 备注 -->
		</if>
	   <if test="create_user_id != null ">
		      AND create_user_id = #{create_user_id}  <!-- 创建人 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- 创建时间 -->
		</if>
	   <if test="update_user_id != null ">
		      AND update_user_id = #{update_user_id}  <!-- 更新人 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time = #{update_time}  <!-- 更新时间 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state = #{state}  <!-- 状态 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 交集-->
	<sql id="like">
	    <if test="stage_code != null and stage_code != ''">
		      AND stage_code like '${stage_code}%'  <!-- 阶段编码 -->
		</if>
	    <if test="stage_name != null and stage_name != ''">
		      AND stage_name like '${stage_name}%'  <!-- 阶段名称 -->
		</if>
	    <if test="stage_remark != null and stage_remark != ''">
		      AND stage_remark like '${stage_remark}%'  <!-- 备注 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time like '${update_time}%'  <!-- 更新时间 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state like '${state}%'  <!-- 状态 -->
		</if>
	</sql>
	<!-- Where模糊匹配字段 并集 -->
	<sql id="likeOr">
	    <if test="stage_code != null and stage_code != ''">
		      Or stage_code like '${stage_code}%'  <!-- 阶段编码 -->
		</if>
	    <if test="stage_name != null and stage_name != ''">
		      Or stage_name like '${stage_name}%'  <!-- 阶段名称 -->
		</if>
	    <if test="stage_remark != null and stage_remark != ''">
		      Or stage_remark like '${stage_remark}%'  <!-- 备注 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      Or create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      Or update_time like '${update_time}%'  <!-- 更新时间 -->
		</if>
	    <if test="state != null and state != ''">
		      Or state like '${state}%'  <!-- 状态 -->
		</if>
	</sql>
	
</mapper>