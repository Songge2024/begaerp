<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- bs_proj_types[CheckProjType]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-10-10 19:46:37 -->
<mapper namespace="com.bl3.pm.process.dao.CheckProjTypeDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="CheckProjTypePO">
		INSERT INTO bs_proj_types (
		<if test="type_name != null and type_name != ''">
	         type_name, <!-- 类型名称 -->
		</if>
		<if test="type_desc != null and type_desc != ''">
	         type_desc, <!-- 类型描述 -->
		</if>
		<if test="model != null and model != ''">
	         model, <!-- 开发模型 -->
		</if>
		<if test="state != null and state != ''">
	         state, <!-- 状态 -->
		</if>
		<if test="create_user_id != null">
	         create_user_id, <!-- 创建人 -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- 创建时间 -->
		</if>
		<if test="update_user_id != null">
	         update_user_id, <!-- 更新人 -->
		</if>
		<if test="update_time != null and update_time != ''">
	         update_time, <!-- 更新时间 -->
		</if>
		<if test="type_code != null and type_code != ''">
	          type_code  <!-- 类型CODE -->
	   </if>
		)VALUES(
		<if test="type_name != null and type_name != ''">
	          #{type_name, jdbcType=VARCHAR}, <!-- 类型名称 -->
	    </if>
		<if test="type_desc != null and type_desc != ''">
	          #{type_desc, jdbcType=VARCHAR}, <!-- 类型描述 -->
	    </if>
		<if test="model != null and model != ''">
	          #{model, jdbcType=VARCHAR}, <!-- 开发模型 -->
	    </if>
		<if test="state != null and state != ''">
	          #{state, jdbcType=VARCHAR}, <!-- 状态 -->
	    </if>
		<if test="create_user_id != null">
	          #{create_user_id, jdbcType=INTEGER}, <!-- 创建人 -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="update_user_id != null">
	          #{update_user_id, jdbcType=INTEGER}, <!-- 更新人 -->
	    </if>
		<if test="update_time != null and update_time != ''">
	          #{update_time, jdbcType=VARCHAR}, <!-- 更新时间 -->
	    </if>
		<if test="type_code != null and type_code != ''">
		     #{type_code, jdbcType=VARCHAR}  <!-- 类型CODE -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="CheckProjTypePO">
		INSERT INTO bs_proj_types (
		    <include refid="column" />
		)
		VALUES (
		    #{type_code, jdbcType=VARCHAR},  <!-- 类型CODE -->
		    #{type_name, jdbcType=VARCHAR},  <!-- 类型名称 -->
		    #{type_desc, jdbcType=VARCHAR},  <!-- 类型描述 -->
		    #{model, jdbcType=VARCHAR},  <!-- 开发模型 -->
		    #{state, jdbcType=VARCHAR},  <!-- 状态 -->
		    #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
		    #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{update_user_id, jdbcType=INTEGER},  <!-- 更新人 -->
		    #{update_time, jdbcType=VARCHAR}  <!-- 更新时间 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="CheckProjTypePO">
		UPDATE bs_proj_types
		<set>
			<if test="type_code != null">
		          type_code = #{type_code, jdbcType=VARCHAR},  <!-- 类型CODE -->
			</if>
			<if test="type_name != null">
		          type_name = #{type_name, jdbcType=VARCHAR},  <!-- 类型名称 -->
			</if>
			<if test="type_desc != null">
		          type_desc = #{type_desc, jdbcType=VARCHAR},  <!-- 类型描述 -->
			</if>
			<if test="model != null">
		          model = #{model, jdbcType=VARCHAR},  <!-- 开发模型 -->
			</if>
			<if test="state != null">
		          state = #{state, jdbcType=VARCHAR},  <!-- 状态 -->
			</if>
			<if test="create_user_id != null">
		          create_user_id = #{create_user_id, jdbcType=INTEGER},  <!-- 创建人 -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="update_user_id != null">
		          update_user_id = #{update_user_id, jdbcType=INTEGER},  <!-- 更新人 -->
			</if>
			<if test="update_time != null">
		          update_time = #{update_time, jdbcType=VARCHAR},  <!-- 更新时间 -->
			</if>
		</set>
		WHERE  type_code = #{type_code}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bs_proj_types WHERE  type_code = #{type_code}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="CheckProjTypePO">
		SELECT
		<include refid="column" />
		FROM bs_proj_types WHERE  type_code = #{type_code}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="CheckProjTypePO">
		SELECT
		    <include refid="column" />
		FROM bs_proj_types
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="CheckProjTypePO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_types
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="CheckProjTypePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_proj_types
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="like" parameterType="Dto" resultType="CheckProjTypePO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_types
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likeOr" parameterType="Dto" resultType="CheckProjTypePO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_types
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likePage" parameterType="Dto" resultType="CheckProjTypePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_proj_types
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="likeOrPage" parameterType="Dto" resultType="CheckProjTypePO" useCache="false">
	    SELECT
	    (
		CASE
		WHEN state = 0 THEN
			'未启用'
		WHEN state = 1 THEN
			'已启用'
		ELSE
			'已作废'
		END
	)state_name,
			<include refid="column" />	
		FRoM bs_proj_types
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>	
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM bs_proj_types
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bs_proj_types
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  type_code,  <!-- 类型CODE -->
		  type_name,  <!-- 类型名称 -->
		  type_desc,  <!-- 类型描述 -->
		  model,  <!-- 开发模型 -->
		  state,  <!-- 状态 -->
		  create_user_id,  <!-- 创建人 -->
		  create_time,  <!-- 创建时间 -->
		  update_user_id,  <!-- 更新人 -->
		  update_time  <!-- 更新时间 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bs_proj_types.type_code,  <!-- 类型CODE -->
		  bs_proj_types.type_name,  <!-- 类型名称 -->
		  bs_proj_types.type_desc,  <!-- 类型描述 -->
		  bs_proj_types.model,  <!-- 开发模型 -->
		  bs_proj_types.state,  <!-- 状态 -->
		  bs_proj_types.create_user_id,  <!-- 创建人 -->
		  bs_proj_types.create_time,  <!-- 创建时间 -->
		  bs_proj_types.update_user_id,  <!-- 更新人 -->
		  bs_proj_types.update_time  <!-- 更新时间 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="type_code != null and type_code != ''">
		      AND type_code = #{type_code}  <!-- 类型CODE -->
		</if>
	    <if test="type_name != null and type_name != ''">
		      AND type_name = #{type_name}  <!-- 类型名称 -->
		</if>
	    <if test="type_desc != null and type_desc != ''">
		      AND type_desc = #{type_desc}  <!-- 类型描述 -->
		</if>
	    <if test="model != null and model != ''">
		      AND model = #{model}  <!-- 开发模型 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state = #{state}  <!-- 状态 -->
		</if>
	   <if test="create_user_id != null ">
		      AND create_user_id = #{create_user_id}  <!-- 创建人 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- 创建时间 -->
		</if>
	   <if test="update_user_id != null ">
		      AND update_user_id = #{update_user_id}  <!-- 更新人 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time = #{update_time}  <!-- 更新时间 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 交集-->
	<sql id="like">
	    <if test="type_code != null and type_code != ''">
		      AND type_code like '${type_code}%'  <!-- 类型CODE -->
		</if>
	    <if test="type_name != null and type_name != ''">
		      AND type_name like '${type_name}%'  <!-- 类型名称 -->
		</if>
	    <if test="type_desc != null and type_desc != ''">
		      AND type_desc like '${type_desc}%'  <!-- 类型描述 -->
		</if>
	    <if test="model != null and model != ''">
		      AND model like '${model}%'  <!-- 开发模型 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state like '${state}%'  <!-- 状态 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time like '${update_time}%'  <!-- 更新时间 -->
		</if>
	</sql>
	<!-- Where模糊匹配字段 并集 -->
	<sql id="likeOr">
	    <if test="type_code != null and type_code != ''">
		      Or type_code like '${type_code}%'  <!-- 类型CODE -->
		</if>
	    <if test="type_name != null and type_name != ''">
		      Or type_name like '${type_name}%'  <!-- 类型名称 -->
		</if>
	    <if test="type_desc != null and type_desc != ''">
		      Or type_desc like '${type_desc}%'  <!-- 类型描述 -->
		</if>
	    <if test="model != null and model != ''">
		      Or model like '${model}%'  <!-- 开发模型 -->
		</if>
	    <if test="state != null and state != ''">
		      Or state like '${state}%'  <!-- 状态 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      Or create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      Or update_time like '${update_time}%'  <!-- 更新时间 -->
		</if>
	</sql>
	
</mapper>