<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- bs_proj_version[ProjVersion]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-03-08 11:26:18 -->
<mapper namespace="com.bl3.pm.basic.dao.ProjVersionDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="version_id" parameterType="ProjVersionPO">
		INSERT INTO bs_proj_version (
		<if test="version_number != null and version_number != ''">
	         version_number, <!-- 版本号 -->
		</if>
		<if test="proj_id != null">
	         proj_id, <!-- 项目ID -->
		</if>
		<if test="remark != null and remark != ''" >
	         remark, <!-- 备注 -->
		</if>
		<if test="sortno != null and sortno != ''">
	         sortno, <!-- 排序号 -->
		</if>
		<if test="sortno==null">
			sortno, <!-- 排序号 -->
		</if>
		<if test="create_id != null">
	         create_id, <!-- 创建人ID -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- 创建时间 -->
		</if>
		<if test="update_id != null">
	         update_id, <!-- 修改人ID -->
		</if>
		<if test="update_time != null and update_time != ''">
	         update_time, <!-- 修改时间 -->
		</if>
		<if test="state != null and state != ''">
	         state, <!-- 状态（1 有效 0 无效） -->
		</if>
	          version_id
		)VALUES(
		<if test="version_number != null and version_number != ''">
	          #{version_number, jdbcType=VARCHAR}, <!-- 版本号 -->
	    </if>
		<if test="proj_id != null">
	          #{proj_id, jdbcType=INTEGER}, <!-- 项目ID -->
	    </if>
		<if test="remark != null and remark != ''">
	          #{remark, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="sortno != null and sortno != ''">
	          #{sortno, jdbcType=INTEGER}, <!-- 排序号 -->
	    </if>
	     <if test="sortno == null">
		 (SELECT ifnull(max(sortno),0) FROM bs_proj_version a WHERE state != -1 AND proj_id = #{proj_id})+1,
		 </if>
		<if test="create_id != null">
	          #{create_id, jdbcType=INTEGER}, <!-- 创建人ID -->
	    </if>
		<if test="create_time != null and create_time != ''">
	           sysdate(), <!-- 创建时间 -->
	    </if>
		<if test="update_id != null">
	          #{update_id, jdbcType=INTEGER}, <!-- 修改人ID -->
	    </if>
		<if test="update_time != null and update_time != ''">
	          #{update_time, jdbcType=VARCHAR}, <!-- 修改时间 -->
	    </if>
		<if test="state != null and state != ''">
	          #{state, jdbcType=VARCHAR}, <!-- 状态（1 有效 0 无效） -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="version_id" parameterType="ProjVersionPO">
		INSERT INTO bs_proj_version (
		    <include refid="column" />
		)
		VALUES (
		    #{version_id, jdbcType=INTEGER},  <!-- 版本号主键ID -->
		    #{version_number, jdbcType=VARCHAR},  <!-- 版本号 -->
		    #{proj_id, jdbcType=INTEGER},  <!-- 项目ID -->
		    #{remark, jdbcType=VARCHAR},  <!-- 备注 -->
		    #{sortno, jdbcType=INTEGER},  <!-- 排序号 -->
		    #{create_id, jdbcType=INTEGER},  <!-- 创建人ID -->
		    #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{update_id, jdbcType=INTEGER},  <!-- 修改人ID -->
		    #{update_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
		    #{state, jdbcType=VARCHAR}  <!-- 状态（1 有效 0 无效） -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="ProjVersionPO">
		UPDATE bs_proj_version
		<set>
			<if test="version_id != null">
		          version_id = #{version_id, jdbcType=INTEGER},  <!-- 版本号主键ID -->
			</if>
			<if test="version_number != null">
		          version_number = #{version_number, jdbcType=VARCHAR},  <!-- 版本号 -->
			</if>
			<if test="proj_id != null">
		          proj_id = #{proj_id, jdbcType=INTEGER},  <!-- 项目ID -->
			</if>
			<if test="remark != null">
		          remark = #{remark, jdbcType=VARCHAR},  <!-- 备注 -->
			</if>
			<if test="sortno != null">
		          sortno = #{sortno, jdbcType=INTEGER},  <!-- 排序号 -->
			</if>
			<if test="create_id != null">
		          create_id = #{create_id, jdbcType=INTEGER},  <!-- 创建人ID -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="update_id != null">
		          update_id = #{update_id, jdbcType=INTEGER},  <!-- 修改人ID -->
			</if>
			<if test="update_time != null">
		          update_time = #{update_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
			</if>
			<if test="state != null">
		          state = #{state, jdbcType=VARCHAR},  <!-- 状态（1 有效 0 无效） -->
			</if>
		</set>
		WHERE  version_id = #{version_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bs_proj_version WHERE  version_id = #{version_id}
	</delete>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteVersionByKey">
		delete from bs_proj_version
		where version_id = #{version_id}
	</delete>
	
	<!-- 根据主键删除项目版本号是删除下面的代码版本号 -->
	<delete id="deleteCodeVersionByKey">
		delete from bs_proj_code_version
		where version_id = #{version_id}
	</delete>
	
	<!-- 根据主键删除项目版本号时删除下面的测试版本号 -->
	<delete id="deleteTestVersionByKey">
		delete from bs_proj_test_version
		where version_id = #{version_id}
	</delete>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="updateVersionStateStopByKey">
		update bs_proj_version  
		set state = 0
		where version_id = #{version_id}
	</delete>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="updateCodeVersionStateStopByKey">
		update bs_proj_code_version  
		set state = 0
		where version_id = #{version_id}
		and state != -1
	</delete>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="updateTestVersionStateStopByKey">
		update bs_proj_test_version  
		set state = 0
		where version_id = #{version_id}
		and state != -1
	</delete>
	
	<!-- 根据主键启用数据持久化对象 -->
	<delete id="updateVersionStateRunByKey">
		update bs_proj_version  
		set state = 1
		where version_id = #{version_id}
	</delete>
	
	<!-- 根据主键启用数据持久化对象 -->
	<delete id="updateCodeVersionStateRunByKey">
		update bs_proj_code_version  
		set state = 1
		where version_id = #{version_id}
		  and state != -1
	</delete>
	
	<!-- 根据主键启用数据持久化对象 -->
	<delete id="updateTestVersionStateRunByKey">
		update bs_proj_test_version  
		set state = 1
		where version_id = #{version_id}
		  and state != -1
	</delete>
	
	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="ProjVersionPO">
		SELECT
		<include refid="column" />
		FROM bs_proj_version WHERE  version_id = #{version_id}
	</select>

	<select id="selectByVersinId" resultType="ProjVersionPO">
		SELECT
			a.version_id
		FROM
			bs_proj_version a
		INNER JOIN qa_bug_manage b ON b.version_id = a.version_id
		AND a.version_id = #{version_id}
	</select>
	

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectStateByVersionKey" resultType="ProjVersionPO">
		SELECT
		state
		FROM bs_proj_version WHERE version_id = #{version_id}
	</select>
	
	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="ProjVersionPO">
		SELECT
		    <include refid="column" />
		FROM bs_proj_version
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="ProjVersionPO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_version
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage1" parameterType="Dto" resultType="ProjVersionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_proj_version
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="like" parameterType="Dto" resultType="ProjVersionPO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_version
		<where>
		    <include refid="like" />
		</where>	
	</select>
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likeOr" parameterType="Dto" resultType="ProjVersionPO">
		SELECT
			<include refid="column" />	
		FROM bs_proj_version
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)交集 -->
	<select id="likePage" parameterType="Dto" resultType="ProjVersionPO" useCache="false">
	    SELECT
			bpv.version_id,
			bpv.version_number,
			bpv.proj_id,
			bpv.remark,
			bpv.sortno,
			bpv.create_id,
			aur.name as create_name,
			bpv.create_time,
			bpv.update_id,
			bpv.update_time,
			bpv.state,
			aar.name as update_name
		FROM 
			bs_proj_version bpv
		LEFT JOIN aos_user aur ON bpv.create_id = aur.id
		LEFT JOIN aos_user aar ON bpv.update_id = aar.id
		<where>
			<if test="proj_id != null ">
		      AND proj_id = #{proj_id}  <!-- 项目ID -->
			</if>
		    <include refid="like" />
		</where>
		order by sortno
	</select>
	
	<select id="versionNumberCount" parameterType="Dto" resultType="Integer">
		select COUNT(version_id) FROM bs_proj_version WHERE version_number = #{version_number} AND proj_id = #{proj_id}
	</select>
	
	<select id="versionNumberCount1" parameterType="Dto" resultType="Integer">
		select COUNT(version_id) FROM bs_proj_version WHERE version_number = #{version_number} AND proj_id = #{proj_id} AND version_id != #{version_id}
	</select>
	
	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)并集 -->
	<select id="likeOrPage" parameterType="Dto" resultType="ProjVersionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM bs_proj_version
		<where>
		    <include refid="likeOr" />
		</where>	
	</select>	
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM bs_proj_version
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bs_proj_version
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  version_id,  <!-- 版本号主键ID -->
		  version_number,  <!-- 版本号 -->
		  proj_id,  <!-- 项目ID -->
		  remark,  <!-- 备注 -->
		  sortno,  <!-- 排序号 -->
		  create_id,  <!-- 创建人ID -->
		  create_time,  <!-- 创建时间 -->
		  update_id,  <!-- 修改人ID -->
		  update_time,  <!-- 修改时间 -->
		  state  <!-- 状态（1 有效 0 无效） -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bs_proj_version.version_id,  <!-- 版本号主键ID -->
		  bs_proj_version.version_number,  <!-- 版本号 -->
		  bs_proj_version.proj_id,  <!-- 项目ID -->
		  bs_proj_version.remark,  <!-- 备注 -->
		  bs_proj_version.sortno,  <!-- 排序号 -->
		  bs_proj_version.create_id,  <!-- 创建人ID -->
		  bs_proj_version.create_time,  <!-- 创建时间 -->
		  bs_proj_version.update_id,  <!-- 修改人ID -->
		  bs_proj_version.update_time,  <!-- 修改时间 -->
		  bs_proj_version.state  <!-- 状态（1 有效 0 无效） -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="version_id != null ">
		      AND version_id = #{version_id}  <!-- 版本号主键ID -->
		</if>
	    <if test="version_number != null and version_number != ''">
		      AND version_number = #{version_number}  <!-- 版本号 -->
		</if>
	   <if test="proj_id != null ">
		      AND proj_id = #{proj_id}  <!-- 项目ID -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark = #{remark}  <!-- 备注 -->
		</if>
	   <if test="sortno != null ">
		      AND sortno = #{sortno}  <!-- 排序号 -->
		</if>
	   <if test="create_id != null ">
		      AND create_id = #{create_id}  <!-- 创建人ID -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- 创建时间 -->
		</if>
	   <if test="update_id != null ">
		      AND update_id = #{update_id}  <!-- 修改人ID -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time = #{update_time}  <!-- 修改时间 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state = #{state}  <!-- 状态（1 有效 0 无效） -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 交集-->
	<sql id="like">
	    <if test="version_number != null and version_number != ''">
		      AND version_number like '${version_number}%'  <!-- 版本号 -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark like '${remark}%'  <!-- 备注 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      AND update_time like '${update_time}%'  <!-- 修改时间 -->
		</if>
	    <if test="state != null and state != ''">
		      AND state like '${state}%'  <!-- 状态（1 有效 0 无效） -->
		</if>
	</sql>
	<!-- Where模糊匹配字段 并集 -->
	<sql id="likeOr">
	    <if test="version_number != null and version_number != ''">
		      Or version_number like '${version_number}%'  <!-- 版本号 -->
		</if>
	    <if test="remark != null and remark != ''">
		      Or remark like '${remark}%'  <!-- 备注 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      Or create_time like '${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="update_time != null and update_time != ''">
		      Or update_time like '${update_time}%'  <!-- 修改时间 -->
		</if>
	    <if test="state != null and state != ''">
		      Or state like '${state}%'  <!-- 状态（1 有效 0 无效） -->
		</if>
	</sql>
	
</mapper>